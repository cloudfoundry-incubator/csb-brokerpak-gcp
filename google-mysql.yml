# Copyright 2018 the Service Broker Project Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
version: 1
name: google-mysql
id: b9f3d4f3-8716-4179-8b7c-e80bd5bccb31
description: Mysql is a fully managed service for the
  Google Cloud Platform.
display_name: Google Cloud Mysql
image_url: https://cloud.google.com/_static/images/cloud/products/logos/svg/sql.svg
documentation_url: https://cloud.google.com/sql/docs/mysql/
support_url: https://cloud.google.com/support/
tags: [gcp, mysql, preview]
plans:
- name: small
  id: 8809fe67-99b5-48dd-a6dd-890ee45e86be
  description: 'MySQL v5.7, minumum 2 cores, minumum 4GB ram, 10GB storage'
  display_name: "small"
  properties:
    cores: 2
    mysql_version: 5.7
    storage_gb: 10
- name: medium
  id: 753accb8-52a7-4673-8216-ffc539351aea
  description: 'MySQL v5.7, minumum 4 cores, minumum 8GB ram, 10GB storage'
  display_name: "medium"
  properties:
    cores: 4
    mysql_version: 5.7
    storage_gb: 10
- name: large
  id: 8f8fc4ab-2b37-41da-bc6a-e915497dac33
  description: 'MySQL v5.7, minumum 8 cores, minumum 16GB ram, 20GB storage'
  display_name: "large"
  properties:
    cores: 8
    mysql_version: 5.7
    storage_gb: 20
provision:
  plan_inputs:
  - field_name: cores
    required: true
    type: integer
    details: Minimum number of cores for service instance.
    default: 2
    constraints:
      maximum: 64
      minimum: 1
      multipleOf: 2
  - field_name: mysql_version
    required: true
    type: string
    details: The version for the mysql instance.
    default: 5.7
    enum: 
      5.6: MySQL v5.6
      5.7: MySQL v5.7
  - field_name: storage_gb
    required: true
    type: number
    details: Size of storage volume for service instance.
    defualt: 10
    constraints:
      maximum: 4096
      minumum: 10      
  user_inputs:
  - field_name: instance_name
    type: string
    details: Name for your mysql instance
    default: vsb-mysql-${request.instance_id}
    constraints:
      maxLength: 98
      minLength: 6
      pattern: ^[a-z][a-z0-9-]+$
  - field_name: db_name
    type: string
    details: Name for your database
    default: vsb-db
    constraints:
      maxLength: 64
  - field_name: region
    type: string
    details: The region of the mysql instance.
    default: us-central1
    enum:
      asia-east1: asia-east1
      asia-east2: asia-east2
      asia-northeast1: asia-northeast1
      asia-northeast2: asia-northeast2
      asia-northeast3: asia-northeast3
      asia-south1: asia-south1
      asia-southeast1: asia-southeast1
      australia-southeast1: australia-southeast1
      europe-north1: europe-north1
      europe-west1: europe-west1
      europe-west2: europe-west2
      europe-west3: europe-west3
      europe-west4: europe-west4
      europe-west6: europe-west6
      northamerica-northeast1: northamerica-northeast1
      southamerica-east1: southamerica-east1
      us-central1: us-central1
      us-east1: us-east1
      us-east4: us-east4
      us-west1: us-west1
      us-west2: us-west2         
  - field_name: authorized_network
    type: string
    details: The name of the Google Compute Engine network to which the instance is connected. If left unspecified, the network named 'default' will be used.
    default: default
  computed_inputs:
  - name: labels
    default: ${json.marshal(request.default_labels)}
    overwrite: true
    type: object
  template: |-
    variable cores { type = number }
    variable authorized_network { type = string }
    variable instance_name { type = string }
    variable db_name { type = string }
    variable mysql_version { type = string }
    variable region { type = string }
    variable labels { type = map }
    variable storage_gb { type = number }

    data "google_compute_network" "authorized-network" {
      name = var.authorized_network
    }

    resource "google_compute_global_address" "private_ip_address" {
      name          = "priv-ip-addr-${var.instance_name}"
      purpose       = "VPC_PEERING"
      address_type  = "INTERNAL"
      prefix_length = 24
      network       = data.google_compute_network.authorized-network.self_link
    }

    resource "google_service_networking_connection" "private_vpc_connection" {
      network                 = data.google_compute_network.authorized-network.self_link
      service                 = "servicenetworking.googleapis.com"
      reserved_peering_ranges = [google_compute_global_address.private_ip_address.name]
    }

    locals {
      service_tiers = {
        // https://cloud.google.com/sql/pricing#2nd-gen-pricing
        1 = "db-n1-standard-1"
        2 = "db-n1-standard-2"
        4 = "db-n1-standard-4"
        8 = "db-n1-standard-8"
        16 = "db-n1-standard-16"
        32 = "db-n1-standard-32"
        64 = "db-n1-standard-64"
      }   

      database_versions = {
        "5.6" = "MYSQL_5_6"
        "5.7" = "MYSQL_5_7"
      }
    }

    resource "google_sql_database_instance" "instance" {
      name             = var.instance_name
      database_version = local.database_versions[var.mysql_version]
      region           = var.region

      depends_on = [google_service_networking_connection.private_vpc_connection]

      settings {
        tier = local.service_tiers[var.cores]
        disk_size = var.storage_gb
        user_labels = var.labels
        
        ip_configuration {
          ipv4_enabled    = false
          private_network = data.google_compute_network.authorized-network.self_link
        }
      }
    }

    resource "google_sql_database" "database" {
      name     = var.db_name
      instance = google_sql_database_instance.instance.name
    }

    resource "random_string" "username" {
      length = 16
      special = false
    }

    resource "random_password" "password" {
      length = 16
      special = true
      override_special = "_@"
    }

    resource "google_sql_user" "admin_user" {
      name     = random_string.username.result
      instance = google_sql_database_instance.instance.name
      password = random_password.password.result
    }

    output name { value = "${google_sql_database.database.name}" }
    output hostname { value = "${google_sql_database_instance.instance.first_ip_address}" }
    output port { value = 3306 }
    output username { value = "${google_sql_user.admin_user.name}" }
    output password { value = "${google_sql_user.admin_user.password}" }
  outputs:
  - field_name: name
    type: string
    details: The name of the database.
  - field_name: hostname
    type: string
    details: Hostname or IP address of the exposed mysql endpoint used by clients to connect to the service.
  - field_name: port
    type: integer
    details: The port number of the exposed mysql instance.
  - field_name: username
    type: string
    details: The username to authenticate to the database instance.
  - field_name: password
    type: string
    details: The password to authenticate to the database instance.
bind:
  plan_inputs: []
  user_inputs: []
  computed_inputs:
  - name: mysql_db_name
    type: string
    default: ${instance.details["name"]}
    overwrite: true
  - name: mysql_hostname
    type: string
    default: ${instance.details["hostname"]}
    overwrite: true
  - name: mysql_port
    type: integer
    default: ${instance.details["port"]}
    overwrite: true
  - name: admin_username
    type: string
    default: ${instance.details["username"]}
    overwrite: true
  - name: admin_password
    type: string
    default: ${instance.details["password"]}
    overwrite: true
  template: |-
    variable mysql_db_name { type = string }
    variable mysql_hostname { type = string }
    variable mysql_port { type = number }
    variable admin_username { type = string }
    variable admin_password { type = string }

    provider "mysql" {
      endpoint = format("%s:%d", var.mysql_hostname, var.mysql_port)
      username = var.admin_username
      password = var.admin_password
    }

    resource "random_string" "username" {
      length = 16
      special = false
    }

    resource "random_password" "password" {
      length = 16
      special = true
      override_special = "_@"
    }    

    resource "mysql_user" "newuser" {
      user               = random_string.username.result
      host               = var.mysql_hostname
      plaintext_password = random_password.password.result
    }

    resource "mysql_grant" "newuser" {
      user       = mysql_user.newuser.user
      host       = mysql_user.newuser.host
      database   = var.mysql_db_name
      privileges = ["ALL"]
    }

    output username { value = random_string.username.result }
    output password { value = random_password.password.result }
    output uri { 
      value = format("mysql://%s:%s@%s:%d/%s", 
                      random_string.username.result, 
                      random_password.password.result, 
                      var.mysql_hostname, 
                      var.mysql_port,
                      var.mysql_db_name) 
    }
    output jdbcUrl { 
      value = format("jdbc:mysql://%s:%d/%s?user=%s\u0026password=%s\u0026useSSL=false", 
                      var.mysql_hostname, 
                      var.mysql_port,
                      var.mysql_db_name, 
                      random_string.username.result, 
                      random_password.password.result) 
    }

  outputs: 
  - field_name: username
    type: string
    details: The username to authenticate to the database instance.
  - field_name: password
    type: string
    details: The password to authenticate to the database instance.  
  - field_name: uri
    type: string
    details: The uri to connect to the database instance and database.
  - field_name: jdbcUrl
    type: string
    details: The jdbc url to connect to the database instance and database.    
examples:
- name: small configuration
  description: Create a small mysql instance
  plan_id: 8809fe67-99b5-48dd-a6dd-890ee45e86be
  provision_params: {}
  bind_params: {}
- name: small configuration v5.6 50gb storage
  description: Create a small mysql v5.6 instance with 50gb storage
  plan_id: 8809fe67-99b5-48dd-a6dd-890ee45e86be
  provision_params: { "mysql_version": "5.6", "storage_gb": 50 }
  bind_params: {}
- name: medium configuration
  description: Create a medium mysql instance
  plan_id: 753accb8-52a7-4673-8216-ffc539351aea
  provision_params: {}
  bind_params: {}
- name: large configuration
  description: Create a large mysql instance
  plan_id: 8f8fc4ab-2b37-41da-bc6a-e915497dac33
  provision_params: {}
  bind_params: {}
